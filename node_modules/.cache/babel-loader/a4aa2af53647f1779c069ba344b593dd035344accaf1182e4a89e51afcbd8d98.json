{"ast":null,"code":"import'./LoginComponent.css';import{Form,redirect,json,useActionData}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function LoginComponent(){//실패경우1 - \nconst data=useActionData();console.log(\"useActionData:\",data);return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"login\",children:/*#__PURE__*/_jsxs(Form,{method:\"post\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"userid\",children:\"userid:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"userid\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"password:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"password\"})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{name:\"login\",className:\"btn btn-success m-5\",children:\"login\"})})]})})});}export async function action(_ref){let{request}=_ref;// 회원가입폼 데이터 얻기\nconst data=await request.formData();const authData={userid:data.get('userid'),password:data.get('password')};console.log(\"authData>>\",authData);const response=await fetch('http://localhost:8090/todo/authenticate',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(authData)});console.log(\"회원가입 요청결과:\",response);//실패경우1 - 400: Bad Request 와 401: Unauthorized\n//  실습은 스프리의 @Valid 위반시 400 에러가 발생됨. 이 경우 response를 바로 리턴하면 \n//  폼에서 useActionData()로 에러를 처리할 수 있음.\nif(response.status===400||response.status===401||response.status===422){console.log(\"response.status>>\",response.status);return response;}//실패경우2- 전반적인 서버에러 ( 예> userid 중복에러 )\nif(!response.ok){console.log(\"response.status>>\",response.status);throw json({message:'요청에 대한 처리 불가.',title:'요청에러',email:'inky4832@daum.net'},{status:500});}//성공경우\nconst resData=await response.json();console.log(\"resData>>>>>>\",resData);// 응답받은 token과 userid  로컬 스토리지에 저장\nconst token=resData.token;localStorage.setItem('jwtAuthToken',token);localStorage.setItem('userid',authData.userid);return redirect('/');}//end action\nexport default LoginComponent;","map":{"version":3,"names":["Form","redirect","json","useActionData","jsx","_jsx","jsxs","_jsxs","LoginComponent","data","console","log","className","children","method","htmlFor","type","name","action","_ref","request","formData","authData","userid","get","password","response","fetch","headers","body","JSON","stringify","status","ok","message","title","email","resData","token","localStorage","setItem"],"sources":["C:/React_Study/todo_boot_security_jwt_mysql_React소스_컨텍스트명은todo임/src/pages/LoginComponent.js"],"sourcesContent":["\r\nimport './LoginComponent.css';\r\n\r\nimport {\r\n  Form,\r\n  redirect,\r\n  json,\r\n  useActionData\r\n} from 'react-router-dom';\r\n\r\nfunction LoginComponent() {\r\n\r\n    //실패경우1 - \r\n    const data = useActionData();\r\n    console.log(\"useActionData:\", data);\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n     <div className=\"login\">\r\n      <Form  method=\"post\">\r\n        <div>\r\n            <label htmlFor=\"userid\">userid:</label>\r\n            <input type=\"text\" name=\"userid\"  />\r\n        </div>\r\n        <div>\r\n            <label htmlFor=\"password\">password:</label>\r\n            <input type=\"password\" name=\"password\"  />\r\n            \r\n        </div>\r\n        <div>\r\n            <button name=\"login\" className=\"btn btn-success m-5\" >login</button>\r\n        </div>\r\n       </Form> \r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\n\r\nexport async function action({request}){\r\n\r\n  // 회원가입폼 데이터 얻기\r\n  const data = await request.formData();\r\n  const authData = {\r\n    userid: data.get('userid'),\r\n    password: data.get('password'),\r\n  };\r\n  console.log(\"authData>>\", authData);\r\n\r\n  const response = await fetch('http://localhost:8090/todo/authenticate', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(authData),\r\n  });\r\n\r\n  console.log(\"회원가입 요청결과:\", response);\r\n\r\n  //실패경우1 - 400: Bad Request 와 401: Unauthorized\r\n  //  실습은 스프리의 @Valid 위반시 400 에러가 발생됨. 이 경우 response를 바로 리턴하면 \r\n  //  폼에서 useActionData()로 에러를 처리할 수 있음.\r\n  if (response.status === 400 || response.status === 401 || response.status === 422) {\r\n    console.log(\"response.status>>\", response.status);\r\n    return response;\r\n  }\r\n  \r\n  //실패경우2- 전반적인 서버에러 ( 예> userid 중복에러 )\r\n  if (!response.ok) {\r\n    console.log(\"response.status>>\", response.status);\r\n    throw  json(\r\n      {\r\n        message:'요청에 대한 처리 불가.',\r\n        title:'요청에러',\r\n        email:'inky4832@daum.net'\r\n      },\r\n      {status:500}\r\n   )\r\n  } \r\n\r\n\r\n  //성공경우\r\n  const resData = await response.json();\r\n  console.log(\"resData>>>>>>\", resData);\r\n\r\n  // 응답받은 token과 userid  로컬 스토리지에 저장\r\n  const token = resData.token;\r\n  localStorage.setItem('jwtAuthToken', token);\r\n  localStorage.setItem('userid', authData.userid);\r\n\r\n\r\n  return redirect('/');\r\n}//end action\r\n\r\n\r\nexport default LoginComponent;\r\n"],"mappings":"AACA,MAAO,sBAAsB,CAE7B,OACEA,IAAI,CACJC,QAAQ,CACRC,IAAI,CACJC,aAAa,KACR,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,QAAS,CAAAC,cAAcA,CAAA,CAAG,CAEtB;AACA,KAAM,CAAAC,IAAI,CAAGN,aAAa,CAAC,CAAC,CAC5BO,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEF,IAAI,CAAC,CAGrC,mBACEJ,IAAA,QAAKO,SAAS,CAAC,WAAW,CAAAC,QAAA,cACzBR,IAAA,QAAKO,SAAS,CAAC,OAAO,CAAAC,QAAA,cACrBN,KAAA,CAACP,IAAI,EAAEc,MAAM,CAAC,MAAM,CAAAD,QAAA,eAClBN,KAAA,QAAAM,QAAA,eACIR,IAAA,UAAOU,OAAO,CAAC,QAAQ,CAAAF,QAAA,CAAC,SAAO,CAAO,CAAC,cACvCR,IAAA,UAAOW,IAAI,CAAC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAG,CAAC,EACnC,CAAC,cACNV,KAAA,QAAAM,QAAA,eACIR,IAAA,UAAOU,OAAO,CAAC,UAAU,CAAAF,QAAA,CAAC,WAAS,CAAO,CAAC,cAC3CR,IAAA,UAAOW,IAAI,CAAC,UAAU,CAACC,IAAI,CAAC,UAAU,CAAG,CAAC,EAEzC,CAAC,cACNZ,IAAA,QAAAQ,QAAA,cACIR,IAAA,WAAQY,IAAI,CAAC,OAAO,CAACL,SAAS,CAAC,qBAAqB,CAAAC,QAAA,CAAE,OAAK,CAAQ,CAAC,CACnE,CAAC,EACD,CAAC,CACL,CAAC,CACH,CAAC,CAER,CAGA,MAAO,eAAe,CAAAK,MAAMA,CAAAC,IAAA,CAAW,IAAV,CAACC,OAAO,CAAC,CAAAD,IAAA,CAEpC;AACA,KAAM,CAAAV,IAAI,CAAG,KAAM,CAAAW,OAAO,CAACC,QAAQ,CAAC,CAAC,CACrC,KAAM,CAAAC,QAAQ,CAAG,CACfC,MAAM,CAAEd,IAAI,CAACe,GAAG,CAAC,QAAQ,CAAC,CAC1BC,QAAQ,CAAEhB,IAAI,CAACe,GAAG,CAAC,UAAU,CAC/B,CAAC,CACDd,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEW,QAAQ,CAAC,CAEnC,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,yCAAyC,CAAE,CACtEb,MAAM,CAAE,MAAM,CACdc,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAC/B,CAAC,CAAC,CAEFZ,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEe,QAAQ,CAAC,CAEnC;AACA;AACA;AACA,GAAIA,QAAQ,CAACM,MAAM,GAAK,GAAG,EAAIN,QAAQ,CAACM,MAAM,GAAK,GAAG,EAAIN,QAAQ,CAACM,MAAM,GAAK,GAAG,CAAE,CACjFtB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEe,QAAQ,CAACM,MAAM,CAAC,CACjD,MAAO,CAAAN,QAAQ,CACjB,CAEA;AACA,GAAI,CAACA,QAAQ,CAACO,EAAE,CAAE,CAChBvB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEe,QAAQ,CAACM,MAAM,CAAC,CACjD,KAAO,CAAA9B,IAAI,CACT,CACEgC,OAAO,CAAC,eAAe,CACvBC,KAAK,CAAC,MAAM,CACZC,KAAK,CAAC,mBACR,CAAC,CACD,CAACJ,MAAM,CAAC,GAAG,CACd,CAAC,CACF,CAGA;AACA,KAAM,CAAAK,OAAO,CAAG,KAAM,CAAAX,QAAQ,CAACxB,IAAI,CAAC,CAAC,CACrCQ,OAAO,CAACC,GAAG,CAAC,eAAe,CAAE0B,OAAO,CAAC,CAErC;AACA,KAAM,CAAAC,KAAK,CAAGD,OAAO,CAACC,KAAK,CAC3BC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAEF,KAAK,CAAC,CAC3CC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAElB,QAAQ,CAACC,MAAM,CAAC,CAG/C,MAAO,CAAAtB,QAAQ,CAAC,GAAG,CAAC,CACtB,CAAC;AAGD,cAAe,CAAAO,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}