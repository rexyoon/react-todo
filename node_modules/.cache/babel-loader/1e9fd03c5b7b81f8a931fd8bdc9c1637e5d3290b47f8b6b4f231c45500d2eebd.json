{"ast":null,"code":"import'./SignupComponent.css';import{Form,redirect,json,useActionData}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function SignupComponent(){//실패경우1 - 400: Bad Request 발생시 에러처리\nconst data=useActionData();console.log(\"useActionData:\",data);return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"signup\",children:/*#__PURE__*/_jsx(\"div\",{className:\"signUpForm\",children:/*#__PURE__*/_jsxs(Form,{method:\"post\",children:[data&&data.message&&/*#__PURE__*/_jsx(\"p\",{children:data.message}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"userid\",children:\"userid:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"userid\",id:\"userid\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"password:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"password\",id:\"password\",defaultValue:1234})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"username\",children:\"username:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"username\",id:\"username\"})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{name:\"signup\",className:\"btn btn-success m-5\",children:\"signup\"})})]})})})});}export async function action(_ref){let{request}=_ref;// 회원가입폼 데이터 얻기\nconst data=await request.formData();const authData={userid:data.get('userid'),password:data.get('password'),username:data.get(\"username\")};console.log(\"authData>>\",authData);const response=await fetch('http://localhost:8090/todo/users',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(authData)});console.log(\"회원가입 요청결과:\",response);//실패경우1 - 400: Bad Request 와 401: Unauthorized\n//  실습은 스프리의 @Valid 위반시 400 에러가 발생됨. 이 경우 response를 바로 리턴하면 \n//  폼에서 useActionData()로 에러를 처리할 수 있음.\nif(response.status===400||response.status===401||response.status===422){console.log(\"response.status>>\",response.status);return response;}//실패경우2- 전반적인 서버에러 ( 예> userid 중복에러 )\nif(!response.ok){console.log(\"response.status>>\",response.status);throw json({message:'요청에 대한 처리 불가.',title:'요청에러',email:'inky4832@daum.net'},{status:500});}return redirect('/');}//end action\nexport default SignupComponent;","map":{"version":3,"names":["Form","redirect","json","useActionData","jsx","_jsx","jsxs","_jsxs","SignupComponent","data","console","log","className","children","method","message","htmlFor","type","name","id","defaultValue","action","_ref","request","formData","authData","userid","get","password","username","response","fetch","headers","body","JSON","stringify","status","ok","title","email"],"sources":["C:/React_Study/todo_boot_security_jwt_mysql_React소스_컨텍스트명은todo임/src/pages/SignupComponent.js"],"sourcesContent":["\r\nimport './SignupComponent.css';\r\nimport {\r\n  Form,\r\n  redirect,\r\n  json,\r\n  useActionData\r\n} from 'react-router-dom';\r\n\r\nfunction SignupComponent() {\r\n\r\n  //실패경우1 - 400: Bad Request 발생시 에러처리\r\n  const data = useActionData();\r\n  console.log(\"useActionData:\", data);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\t\t <div className=\"signup\">\r\n            <div className=\"signUpForm\">\r\n              <Form  method=\"post\" >\r\n              {data && data.message && <p>{data.message}</p>}\r\n                <div>\r\n                    <label htmlFor=\"userid\">userid:</label>\r\n                    <input type=\"text\" name=\"userid\" id=\"userid\" />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"password\">password:</label>\r\n                    <input type=\"password\" name=\"password\" id=\"password\" defaultValue={1234} />\r\n                    \r\n                </div>\r\n                 <div>\r\n                    <label htmlFor=\"username\">username:</label>\r\n                    <input type=\"text\" name=\"username\" id=\"username\" />\r\n                </div>\r\n                <div>\r\n                    <button name=\"signup\" className=\"btn btn-success m-5\" >signup</button>\r\n                </div>\r\n               </Form> \r\n            </div>\r\n         </div>\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport async function action({request}){\r\n\r\n  // 회원가입폼 데이터 얻기\r\n  const data = await request.formData();\r\n  const authData = {\r\n    userid: data.get('userid'),\r\n    password: data.get('password'),\r\n    username:data.get(\"username\")\r\n  };\r\n  console.log(\"authData>>\", authData);\r\n\r\n  const response = await fetch('http://localhost:8090/todo/users', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(authData),\r\n  });\r\n\r\n  console.log(\"회원가입 요청결과:\", response);\r\n\r\n  //실패경우1 - 400: Bad Request 와 401: Unauthorized\r\n  //  실습은 스프리의 @Valid 위반시 400 에러가 발생됨. 이 경우 response를 바로 리턴하면 \r\n  //  폼에서 useActionData()로 에러를 처리할 수 있음.\r\n  if (response.status === 400 || response.status === 401 || response.status === 422) {\r\n    console.log(\"response.status>>\", response.status);\r\n    return response;\r\n  }\r\n  \r\n  //실패경우2- 전반적인 서버에러 ( 예> userid 중복에러 )\r\n  if (!response.ok) {\r\n    console.log(\"response.status>>\", response.status);\r\n    throw  json(\r\n      {\r\n        message:'요청에 대한 처리 불가.',\r\n        title:'요청에러',\r\n        email:'inky4832@daum.net'\r\n      },\r\n      {status:500}\r\n   )\r\n  } \r\n\r\n  return redirect('/');\r\n}//end action\r\n\r\nexport default SignupComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}