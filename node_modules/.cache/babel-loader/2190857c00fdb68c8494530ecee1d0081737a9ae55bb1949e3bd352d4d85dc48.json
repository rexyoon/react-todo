{"ast":null,"code":"import'./UpdateTodoComponent.css';import{useEffect,useState}from'react';import{getAuthToken}from'../util/auth';import{useParams,json,useLoaderData,Form,redirect}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function UpdateTodoComponent(){// const params = useParams();  // params.id 로 접근\nconst{id}=useParams();const xxx=useLoaderData();const[description,setDescription]=useState(xxx.description);const[targetDate,setTargetDate]=useState(xxx.targetDate);console.log(\"xxx: \",xxx);console.log(\"description:\",description);console.log(\"targetDate:\",targetDate);// useEffect 없이 setDescription(xxx.description) 하면 무한반복됨.\nuseEffect(()=>{setDescription(xxx.description);setTargetDate(xxx.targetDate);},[id]);return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Todo Update!\"}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(Form,{method:\"post\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"hidden\",name:\"id\",defaultValue:id}),/*#__PURE__*/_jsxs(\"fieldset\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Description\"}),/*#__PURE__*/_jsx(\"input\",{type:\"search\",className:\"form-control\",name:\"description\",defaultValue:description})]}),/*#__PURE__*/_jsxs(\"fieldset\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Target Date\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",className:\"form-control\",name:\"targetDate\",defaultValue:targetDate})]}),/*#__PURE__*/_jsx(\"input\",{type:\"hidden\",name:\"id\",className:\"form-control\"}),/*#__PURE__*/_jsx(\"input\",{type:\"hidden\",name:\"done\",className:\"form-control\"}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-success m-5\",children:\"Save\"})})]})})]});}export async function loader(_ref){let{request,params}=_ref;alert(\"UpdateTodoComponent. loader\");const id=params.id;const userid=localStorage.getItem(\"userid\");const token=getAuthToken();const response=await fetch(`http://localhost:8090/todo/users/${userid}/todos/${id}`,{method:'GET',headers:{// 'Content-Type': 'application/json',\nAuthorization:`Bearer ${token}`}});console.log(\"update화면 요청결과:\",response);if(response.status===400||response.status===401||response.status===422){console.log(\"response.status>>\",response.status);return response;}if(!response.ok){throw json({message:'Could not save event.'},{status:500});}const resData=await response.json();console.log(\"resData\",resData);return resData;}//end loader\nexport async function action(_ref2){let{request}=_ref2;const userid=localStorage.getItem(\"userid\");const token=getAuthToken();// 회원가입폼 데이터 얻기\nconst data=await request.formData();const id=data.get('id');const authData={description:data.get('description'),targetDate:data.get('targetDate')};console.log(\"authData>>\",authData);const response=await fetch(`http://localhost:8090/todo/users/${userid}/todos/${id}`,{method:'PUT',headers:{'Content-Type':'application/json',Authorization:`Bearer ${token}`},body:JSON.stringify(authData)});console.log(\"Todo 수정 요청결과:\",response);//실패경우1 - 400: Bad Request 와 401: Unauthorized\n//  실습은 스프리의 @Valid 위반시 400 에러가 발생됨. 이 경우 response를 바로 리턴하면 \n//  폼에서 useActionData()로 에러를 처리할 수 있음.\nif(response.status===400||response.status===401||response.status===422){console.log(\"response.status>>\",response.status);return response;}//실패경우2- 전반적인 서버에러 ( 예> userid 중복에러 )\nif(!response.ok){console.log(\"response.status>>\",response.status);throw json({message:'요청에 대한 처리 불가.',title:'요청에러',email:'inky4832@daum.net'},{status:500});}//성공경우\nconst resData=await response.json();console.log(\"resData>>>>>>\",resData);return redirect('/todos');}//end action\nexport default UpdateTodoComponent;","map":{"version":3,"names":["useEffect","useState","getAuthToken","useParams","json","useLoaderData","Form","redirect","jsx","_jsx","jsxs","_jsxs","UpdateTodoComponent","id","xxx","description","setDescription","targetDate","setTargetDate","console","log","className","children","method","type","name","defaultValue","loader","_ref","request","params","alert","userid","localStorage","getItem","token","response","fetch","headers","Authorization","status","ok","message","resData","action","_ref2","data","formData","get","authData","body","JSON","stringify","title","email"],"sources":["C:/React_Study/todo_boot_security_jwt_mysql_React소스_컨텍스트명은todo임/src/pages/UpdateTodoComponent.js"],"sourcesContent":["\r\nimport './UpdateTodoComponent.css';\r\nimport { useEffect, useState } from 'react'\r\nimport { getAuthToken } from '../util/auth';\r\nimport {useParams, json,  useLoaderData , Form,  redirect,} from 'react-router-dom'\r\n\r\nfunction UpdateTodoComponent() {\r\n\r\n  // const params = useParams();  // params.id 로 접근\r\n  const {id} = useParams()\r\n\r\n  const xxx= useLoaderData();\r\n  const[description, setDescription] = useState(xxx.description)\r\n  const[targetDate, setTargetDate] = useState(xxx.targetDate)\r\n\r\n  console.log(\"xxx: \", xxx)\r\n  console.log(\"description:\", description)\r\n  console.log(\"targetDate:\", targetDate)\r\n\r\n  // useEffect 없이 setDescription(xxx.description) 하면 무한반복됨.\r\n  useEffect(\r\n    () => {\r\n      setDescription(xxx.description)\r\n      setTargetDate(xxx.targetDate)\r\n    },\r\n    [id]\r\n    )\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Todo Update!</h1>\r\n             <div>\r\n                  <Form  method=\"post\" >\r\n                     <input type=\"hidden\" name=\"id\" defaultValue={id} />\r\n                      <fieldset className=\"form-group\">\r\n                          <label>Description</label>\r\n                          <input type=\"search\" className=\"form-control\"  name=\"description\" defaultValue={description}/>\r\n                      </fieldset>\r\n                      <fieldset className=\"form-group\">\r\n                          <label>Target Date</label>\r\n                          <input type=\"date\" className=\"form-control\" name=\"targetDate\" defaultValue={targetDate}/>\r\n                          \r\n                      </fieldset>\r\n                      \t   <input type=\"hidden\" name=\"id\" className=\"form-control\"/>\r\n\t\t\t\t           <input type=\"hidden\" name=\"done\" className=\"form-control\"/>\r\n                      <div>\r\n                          <button className=\"btn btn-success m-5\">Save</button>\r\n                      </div>\r\n                  </Form>\r\n            </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport async function loader({request, params}){\r\n  alert(\"UpdateTodoComponent. loader\")\r\n\r\n  const id = params.id;\r\n  const userid = localStorage.getItem(\"userid\")\r\n\r\n  const token = getAuthToken();\r\n\r\n  const response = await fetch(`http://localhost:8090/todo/users/${userid}/todos/${id}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      // 'Content-Type': 'application/json',\r\n       Authorization: `Bearer ${token}`\r\n    }\r\n  });\r\n\r\n  console.log(\"update화면 요청결과:\", response);\r\n\r\n  if (response.status === 400 || response.status === 401 || response.status === 422) {\r\n\t\tconsole.log(\"response.status>>\", response.status);\r\n\t\treturn response;\r\n\t}\r\n\t  \r\n\r\n      if (!response.ok) {\r\n        throw json({ message: 'Could not save event.' }, { status: 500 });\r\n      }\r\n      \r\n    const resData = await response.json();\r\n    console.log(\"resData\", resData);\r\n    return resData;\r\n\r\n}//end loader\r\n\r\n\r\nexport async function action({request}){\r\n\r\n  const userid = localStorage.getItem(\"userid\")\r\n  const token = getAuthToken();\r\n\r\n  // 회원가입폼 데이터 얻기\r\n  const data = await request.formData();\r\n  const id =  data.get('id')\r\n  const authData = {\r\n    description: data.get('description'),\r\n    targetDate: data.get('targetDate'),\r\n  };\r\n  console.log(\"authData>>\", authData);\r\n\r\n  const response = await fetch(`http://localhost:8090/todo/users/${userid}/todos/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n       Authorization: `Bearer ${token}`\r\n    },\r\n    body: JSON.stringify(authData),\r\n  });\r\n\r\n  console.log(\"Todo 수정 요청결과:\", response);\r\n\r\n  //실패경우1 - 400: Bad Request 와 401: Unauthorized\r\n  //  실습은 스프리의 @Valid 위반시 400 에러가 발생됨. 이 경우 response를 바로 리턴하면 \r\n  //  폼에서 useActionData()로 에러를 처리할 수 있음.\r\n  if (response.status === 400 || response.status === 401 || response.status === 422) {\r\n    console.log(\"response.status>>\", response.status);\r\n    return response;\r\n  }\r\n  \r\n  //실패경우2- 전반적인 서버에러 ( 예> userid 중복에러 )\r\n  if (!response.ok) {\r\n    console.log(\"response.status>>\", response.status);\r\n    throw  json(\r\n      {\r\n        message:'요청에 대한 처리 불가.',\r\n        title:'요청에러',\r\n        email:'inky4832@daum.net'\r\n      },\r\n      {status:500}\r\n   )\r\n  } \r\n\r\n\r\n  //성공경우\r\n  const resData = await response.json();\r\n  console.log(\"resData>>>>>>\", resData);\r\n\r\n\r\n\r\n  return redirect('/todos');\r\n}//end action\r\n\r\n\r\nexport default UpdateTodoComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}